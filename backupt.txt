server


const express = require('express');
const app = express();
const server = require('http').Server(app);
const io = require('socket.io')(server);

// Rota para servir o arquivo HTML do cliente
app.get('/', (req, res) => {
  res.sendFile(__dirname + '/index.html');
});

// Lista para armazenar os usuários conectados em cada sala
const users = {};

// Evento de conexão do socket.io
io.on('connection', (socket) => {
  console.log('Nova conexão: ' + socket.id);

  // Evento para lidar com a entrada de um novo usuário em uma sala específica
  socket.on('join', (roomName) => {
    socket.join(roomName);

    if (!users[roomName]) {
      users[roomName] = [socket.id];
    } else {
      users[roomName].push(socket.id);
    }

    const otherUser = users[roomName].find(id => id !== socket.id);
    if (otherUser) {
      socket.emit('other-user', otherUser);
      socket.to(otherUser).emit('user-connected', socket.id);
    }
  });

  // Evento para lidar com o envio de sinalização de oferta
  socket.on('offer', (offer, roomName) => {
    socket.to(roomName).emit('offer', offer, socket.id);
  });

  // Evento para lidar com o envio de sinalização de resposta
  socket.on('answer', (answer, roomName) => {
    socket.to(roomName).emit('answer', answer, socket.id);
  });

  // Evento para lidar com o envio de sinalização de candidato ICE
  socket.on('ice-candidate', (candidate, roomName) => {
    socket.to(roomName).emit('ice-candidate', candidate, socket.id);
  });

  // Evento para desconectar o usuário
  socket.on('disconnect', () => {
    for (const roomName in users) {
      const index = users[roomName].indexOf(socket.id);
      if (index !== -1) {
        users[roomName].splice(index, 1);
        const otherUser = users[roomName][0];
        if (otherUser) {
          socket.to(otherUser).emit('user-disconnected', socket.id);
        }
      }
    }
  });
});

// Inicie o servidor
const port = 3000;
server.listen(port, () => {
  console.log('Servidor iniciado na porta ' + port);
});




index

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Video Chat</title>
  <style>
    .video-container {
      display: flex;
    }

    .video-box {
      width: 50%;
    }

    video {
      width: 100%;
      height: auto;
    }
  </style>
</head>
<body>
  <h1>Video Chat</h1>
  <label for="roomName">Digite o nome da sala:</label>
  <input type="text" id="roomName">
  <button onclick="joinRoom()">Entrar na sala</button>
  <div class="video-container">
    <div class="video-box">
      <h2>Seu vídeo</h2>
      <video id="localVideo" autoplay></video>
    </div>
    <div class="video-box">
      <h2>Vídeo do outro usuário</h2>
      <video id="remoteVideo" autoplay></video>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const myVideo = document.getElementById('localVideo');
    const remoteVideo = document.getElementById('remoteVideo');
    let myStream;
    let roomName;

    // Função para entrar na sala
    function joinRoom() {
      roomName = document.getElementById('roomName').value.trim();
      if (roomName !== '') {
        // Captura a mídia local e adiciona ao elemento de vídeo local
        navigator.mediaDevices.getUserMedia({ video: true, audio: true })
          .then((stream) => {
            myStream = stream;
            addVideoStream(myVideo, stream);

            // Evento para lidar com a entrada de um novo usuário
            socket.emit('join', roomName);
          })
          .catch((error) => {
            console.log('Erro ao obter a mídia: ', error);
          });
      }
    }

    // Configuração da conexão WebRTC
    const configuration = { iceServers: [{ urls: 'stun:stun.l.google.com:19302' }] };
    const peerConnection = new RTCPeerConnection(configuration);

    // Evento para lidar com a entrada de um novo usuário
    socket.on('other-user', (userID) => {
      connectToNewUser(userID);
    });

    // Evento para lidar com o recebimento de uma oferta
    socket.on('offer', (offer, userID) => {
      peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
      peerConnection.createAnswer()
        .then((answer) => {
          peerConnection.setLocalDescription(answer);
          socket.emit('answer', answer, roomName);
        });
      peerConnection.ontrack = (event) => {
        addVideoStream(remoteVideo, event.streams[0]);
      };
    });

    // Evento para lidar com o recebimento de uma resposta
    socket.on('answer', (answer) => {
      peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
    });

    // Evento para lidar com o recebimento de um candidato ICE
    socket.on('ice-candidate', (candidate) => {
      peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
    });

    // Evento para lidar com a desconexão de um usuário
    socket.on('user-disconnected', (userID) => {
      if (userID) {
        const remoteVideoContainer = document.querySelector('.video-box:nth-child(2)');
        remoteVideoContainer.remove();

        peerConnection.close();
        myVideo.srcObject.getTracks().forEach(track => track.stop());
        myVideo.srcObject = null;
        window.location.reload();
      }
    });

    // Função para conectar a um novo usuário
    function connectToNewUser(userID) {
      const stream = myVideo.srcObject;
      stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));
      peerConnection.createOffer()
        .then((offer) => {
          peerConnection.setLocalDescription(offer);
          socket.emit('offer', offer, roomName);
        });
    }

    // Função para adicionar um stream de vídeo a um elemento de vídeo
    function addVideoStream(videoElement, stream) {
      videoElement.srcObject = stream;
      videoElement.addEventListener('loadedmetadata', () => {
        videoElement.play();
      });
    }
  </script>
</body>
</html>
